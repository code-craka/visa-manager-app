{
  "enabled": true,
  "name": "Visa Manager TypeScript Guardian",
  "description": "Automatically validates and fixes TypeScript compilation errors, ensures Clerk JWT authentication standards, validates Material Design usage, checks PostgreSQL queries, and maintains RESTful API conventions when TypeScript files are saved in the Visa Manager App project",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "visa_manager_frontend/src/**/*.tsx",
      "visa_manager_frontend/src/**/*.ts",
      "visa-manager-backend/src/**/*.ts"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "A TypeScript file has been saved in the Visa Manager App project. Please perform the following comprehensive validation and fixes:\n\n1. **TypeScript Compilation Check:**\n   - Run TypeScript compilation for both frontend (visa_manager_frontend) and backend (visa-manager-backend) projects\n   - Fix any compilation errors according to strict TypeScript standards\n   - Ensure zero compilation errors requirement is met\n\n2. **Authentication Standards Validation:**\n   - Verify authentication-related files use Clerk JWT templates (not session tokens)\n   - Ensure JWKS verification with RS256 algorithm is implemented correctly\n   - Check custom claims structure uses: email, role, name\n   - Validate proper authentication error handling with status codes\n\n3. **React Native Material Design Check:**\n   - Ensure React Native components use Material Design with React Native Paper\n   - Verify Electric Violet (#8D05D4) theme color usage\n   - Check TypeScript interfaces are defined for all props and state\n   - Validate proper useCallback and useMemo usage for performance\n\n4. **Database Query Validation:**\n   - Check that database queries use standard PostgreSQL (not Neon serverless driver)\n   - Verify Row-Level Security (RLS) policies with clerk_user_id integration\n   - Ensure proper connection pooling implementation\n   - Validate migration scripts for schema changes\n\n5. **API Standards Compliance:**\n   - Validate all API endpoints follow RESTful conventions\n   - Check proper HTTP status codes usage\n   - Ensure consistent error response format\n   - Verify input validation on all endpoints\n\n6. **Code Quality & Organization:**\n   - Check file organization follows project structure standards\n   - Validate naming conventions (PascalCase for components, camelCase for functions)\n   - Ensure comprehensive error handling with try-catch blocks\n   - Verify async/await usage over Promises\n\n7. **Documentation Updates:**\n   - If significant changes are detected, update related documentation\n   - Ensure README files reflect current implementation\n   - Update API documentation if endpoints are modified\n\nFocus on maintaining production-ready v0.3.0 standards and suggest improvements that align with the development guidelines. Prioritize zero TypeScript compilation errors and adherence to Clerk JWT authentication standards."
  }
}